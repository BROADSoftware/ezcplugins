

{%% if  m.data.httpProxies.docker is defined and m.data.httpProxies.docker.proxy_ca_url is defined %%}
  - { role: register_ca, register_ca_urls: [ "{{{m.data.httpProxies.docker.proxy_ca_url}}}" ] }  
{%% endif %%}

- import_playbook: {{{ m.data.helpers.kubespray.folder }}}/cluster.yml


{%% if 'docker_certificates' in m.data and m.data.docker_certificates|length > 0 %%}
- hosts: kube-node
  tags: [ "docker_certificates" ]
  tasks:
{%% for cert in m.data.docker_certificates %%}
  - name: Create certificate folder for '{{{cert.endpoint }}}'
    file: path=/etc/docker/certs.d/{{{ cert.endpoint }}} state=directory owner=root group=root mode=0755
  - name: copy certificate '{{{cert.endpoint }}}' file
    copy: src={{{ cert.path }}} dest=/etc/docker/certs.d/{{{ cert.endpoint }}} owner=root group=root mode=0644
    notify:
    - restart_docker
{%% if 'ip' in cert %%}
  - name: Add '{{{cert.ip}}}    {{{cert.host}}}' in /etc/hosts
    blockinfile:
      path: /etc/hosts
      marker: "# {mark} Ansible managed (kubspray plugin)"
      content: "{{{cert.ip}}}   {{{cert.host}}}"
{%% else %%}
  - name: Ensure no fake definition in /etc/hosts
    blockinfile:
      path: /etc/hosts
      marker: "# {mark} Ansible managed (kubspray plugin)"
      content: "# Placeholder"
{%% endif %%}
{%% endfor %%}
  handlers:
  - name: Restart Docker
    service:
      name: docker
      state: restarted
    listen: restart_docker
{%% endif %%}


- hosts: kube-master[0]
  tasks:
  - name: "Retrieve config file"
    fetch:
      src: /root/.kube/config
      dest: ./config
      flat: yes

    
- hosts:  kube-master[0]
  tags: [ "node_labels", "node_taints" ]
  tasks:
  - name: Install k8s ansible module required package
    yum: name=python2-openshift state=present
{%%- for role in m.cluster.roles %%}
{%%- if role.k8s is defined and (role.k8s.node_labels is defined or role.k8s.node_taints is defined) %%}    
  - name: Set Node label and taint for role {{{role.name}}}
    k8s:
      state: present
      definition:
        apiVersion: "v1"
        kind: Node
        metadata:
          name: "{{item}}"
{%%- if role.k8s.node_labels is defined %%}     
          labels: {{{role.k8s.node_labels}}}
{%% endif %%}
{%%- if role.k8s.node_taints is defined %%}     
        spec:
          taints: {{{ role.k8s.node_taints }}}
{%% endif %%}
    with_items: 
{%% for node in role.nodes %%}
    - {{{node.name}}}
{%% endfor %%}
{%% endif %%}    
{%% endfor %%}


                 
    
    