provider "aws" {
  region  = "{{{m.data.aws.infra.region}}}"
  profile = "{{{m.data.aws.infra.profile}}}"
}

// ------------------------------------------------ Lookup existing ressources

{%% for subnet in m.data.aws.subnets %%}
data "aws_subnet" "{{{subnet}}}" {
  filter {
    name   = "tag:Name"
    values = ["{{{subnet}}}"]
  }
}
{%% endfor %%}

data "aws_route53_zone" "forward" {
  name = "{{{m.data.aws.infra.route53.forward_domain}}}"
  private_zone = true
  vpc_id = data.aws_subnet.{{{m.data.aws.subnets[0]}}}.vpc_id
}

data "aws_route53_zone" "reverse" {
  name = "{{{m.data.aws.infra.route53.reverse_domain}}}"
  private_zone = true
  vpc_id = data.aws_subnet.{{{m.data.aws.subnets[0]}}}.vpc_id
}

{%% if m.data.aws.needMyVpc %%}
data "aws_vpc" "my_vpc" {
  id = data.aws_subnet.{{{m.data.aws.subnets[0]}}}.vpc_id
}
{%% endif %%}

{%% for esg in m.data.aws.externalSecurityGroups %%}
data "aws_security_group" "{{{esg}}}" {
  filter {
    name   = "tag:Name"
    values = ["{{{esg}}}"]
  }
}
{%% endfor %%}

// -------------------------------------------- Security groups definition(s)

{%% for name, sg in m.data.aws.securityGroupByName.iteritems() %%}
resource "aws_security_group" "{{{sg.name}}}" {
	name 	= "{{{sg.name}}}"
{%% if sg.description is defined %%}
	description = "{{{ sg.description }}}"
{%% endif %%}
	vpc_id	= data.aws_subnet.{{{m.data.aws.subnets[0]}}}.vpc_id
{%% if sg.tags is defined %%}	
  	tags 	= {
{%%- for name, value in sg.tags.iteritems() %%}  		
    	{{{name}}} = "{{{value}}}"
{%% endfor %%}
  	}
{%% endif %%}
{%%  for ingress in sg.ingress %%}
	ingress {
		protocol = "{{{ ingress.protocol }}}"
		from_port = {{{ ingress.from_port }}}
		to_port = {{{ ingress.to_port }}}
{%% if ingress.description is defined %%}
		description = "{{{ ingress.description }}}"
{%% endif %%}
{%% if ingress.self is defined and ingress.self %%}
		self = true
{%% endif %%}
{%% if ingress.cidr_block is defined %%}
		cidr_blocks = ["{{{ ingress.cidr_block }}}"]
{%% endif %%}
{%% if ingress.security_group is defined %%}
		security_groups = [{{{ ingress.security_group }}}]
{%% endif %%}
{%% if ingress.subnet is defined %%}
		cidr_blocks = [data.aws_subnet.{{{ingress.subnet}}}.cidr_block]
{%% endif %%}
	} 
{%% endfor %%} 
{%%  for egress in sg.egress %%}
	egress {
		protocol = "{{{ egress.protocol }}}"
		from_port = {{{ egress.from_port }}}
		to_port = {{{ egress.to_port }}}
{%% if egress.description is defined %%}
		description = "{{{ egress.description }}}"
{%% endif %%}
{%% if egress.self is defined and egress.self %%}
		self = true
{%% endif %%}
{%% if egress.cidr_block is defined %%}
		cidr_blocks = ["{{{ egress.cidr_block }}}"]
{%% endif %%}
{%% if egress.security_group is defined %%}
		security_groups = [{{{ egress.security_group }}}]
{%% endif %%}
{%% if egress.subnet is defined %%}
		cidr_blocks = [data.aws_subnet.{{{egress.subnet}}}.cidr_block]
{%% endif %%}
	} 
{%% endfor %%} 
}

{%% endfor %%} 

// ------------------------------------------------------------------- Instance role definition(s)

{%% for name, role in m.data.roleByName.iteritems() %%}

{%% if role.aws.instance_role_name is defined %%}


resource "aws_iam_instance_profile" "{{{ role.aws.instance_role_name }}}" {
  name = "{{{ role.aws.instance_role_name }}}"
  role = aws_iam_role.{{{ role.aws.instance_role_name }}}.name
}

# This role to be attached to all instances of the group {{{ name }}}
resource "aws_iam_role" "{{{ role.aws.instance_role_name }}}" {
  name = "{{{ role.aws.instance_role_name }}}"

	tags = {
{%%- for name, value in role.aws.tags.iteritems() %%}  		
    	{{{name}}} = "{{{value}}}"
{%%- endfor -%%}
    }


  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })
}


{%% endif %%}

{%% endfor %%} 



// ------------------------------------------------------------------- Instance definition(s)

{%% for node in m.cluster.nodes %%}
// ...................................................... {{{ node.name }}}

resource "aws_instance" "{{{node.terraName}}}" {
	ami                    	= "{{{m.data.roleByName[node.role].aws.ami.id}}}"
  	instance_type          	= "{{{m.data.roleByName[node.role].aws.instance_type }}}"
  	subnet_id				= data.aws_subnet.{{{node.aws.subnet}}}.id
	vpc_security_group_ids	= [{{{m.data.roleByName[node.role].aws.security_group_id }}}]
	key_name				= "{{{m.data.aws.infra.key_pair.name}}}"
	
{%% if m.data.roleByName[node.role].aws.instance_role_name is defined %%}
	iam_instance_profile = aws_iam_instance_profile.{{{ m.data.roleByName[node.role].aws.instance_role_name }}}.name
{%% endif %%}
	
	tags					= {
{%%- for name, value in node.aws.tags.iteritems() %%}  		
    								{{{name}}} = "{{{value}}}"
{%%- endfor -%%}
    						}
	volume_tags				= {
{%%- for name, value in node.aws.tags.iteritems() %%}  		
    								{{{name}}} = "{{{value}}}"
{%%- endfor -%%}
    						}
	root_block_device {
    	volume_size = {{{ m.data.roleByName[node.role].root_size }}}
   		volume_type = "{{{m.data.roleByName[node.role].aws.root_type }}}"
   		delete_on_termination = true
  	}
}

module "route53_{{{node.terraName}}}" {
	source = "./modules/route53"
	forward_zone_id = data.aws_route53_zone.forward.id
	reverse_zone_id = data.aws_route53_zone.reverse.id
	fqdn = "{{{node.fqdn}}}"
	private_ip = aws_instance.{{{node.terraName}}}.private_ip
}


{%% if node.name in m.data.aws.dataDiskByNode %%}

{%% for disk in m.data.aws.dataDiskByNode[node.name] %%}
resource "aws_ebs_volume" "{{{disk.terraName}}}" {
	availability_zone   = aws_instance.{{{node.terraName}}}.availability_zone
  	size				= {{{disk.size}}}
  	type				= "{{{disk.type}}}"
  // Must be same as instance tags. Otherwise, idempotency will fail. (Conflict between aws_ebs_volume.tags and aws_instance.volume_tags
	tags					= {
{%%- for name, value in node.aws.tags.iteritems() %%}  		
    								{{{name}}} = "{{{value}}}"
{%%- endfor -%%}
    						}
}
resource "aws_volume_attachment" "{{{disk.terraName}}}" {
  device_name = "{{{disk.device_aws}}}"
  volume_id   = aws_ebs_volume.{{{disk.terraName}}}.id
  instance_id = aws_instance.{{{node.terraName}}}.id
}
{%% endfor %%}  

{%% endif %%}

{%% endfor %%}  


{%% if (m.cluster.aws.network_load_balancers is defined) and (m.cluster.aws.network_load_balancers | length > 0) %%}

// --------------------------------- Network Load Balancer

{%% for nlb in m.cluster.aws.network_load_balancers %%}

resource "aws_lb" "{{{ nlb.name }}}" {
	name = "{{{ nlb.name }}}"
	internal  = true
	load_balancer_type = "network"
	tags					= {
{%%- for name, value in nlb.tags.iteritems() %%}  		
    								{{{name}}} = "{{{value}}}"
{%%- endfor -%%}
	}
	subnets = [ {%% for subnet in nlb.subnets %%}{%% if loop.index != 1 %%},{%% endif %%}data.aws_subnet.{{{subnet}}}.id{%% endfor %%} ]
}

{%% for alias in nlb.aliases %%}
resource "aws_route53_record" "{{{ nlb.name }}}-alias" {
  zone_id = data.aws_route53_zone.forward.id
  name = "{{{ alias }}}"
  type = "CNAME"
  ttl = "300"
  records = [aws_lb.{{{ nlb.name }}}.dns_name]
}
{%% endfor %%}



{%% for listener in nlb.listeners %%}

resource "aws_lb_target_group" "tg-{{{ nlb.name }}}-{{{ listener.port }}}" {
	name = "tg-{{{ nlb.name }}}-{{{ listener.port }}}"
	target_type = "instance"
	vpc_id = data.aws_subnet.{{{nlb.subnets[0]}}}.vpc_id
	port = {{{ listener.target_port}}}
	protocol = "TCP"	
}

{%% for target in m.data.groupByName[listener.target_group] %%}
resource "aws_lb_target_group_attachment" "tg-{{{ nlb.name }}}-{{{ listener.port }}}-{{{target}}}" {
 	target_group_arn = aws_lb_target_group.tg-{{{ nlb.name }}}-{{{ listener.port }}}.arn
 	target_id        = aws_instance.{{{target}}}.id
 	port             = {{{ listener.target_port }}}
}
{%% endfor %%}


resource "aws_lb_listener" "l-{{{ nlb.name }}}-{{{ listener.port }}}" {
	load_balancer_arn = aws_lb.{{{ nlb.name }}}.arn
	port              = "{{{ listener.port }}}"
	protocol          = "TCP"

 	default_action {
    	type             = "forward"
    	target_group_arn = aws_lb_target_group.tg-{{{ nlb.name }}}-{{{ listener.port }}}.arn
  	}
}



{%% endfor %%}

{%% endfor %%}

{%% endif %%}