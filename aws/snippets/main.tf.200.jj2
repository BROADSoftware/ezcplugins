provider "aws" {
  region     = "{{{m.cluster.aws.region}}}"
  version	= "~> 2.22"
}

// ------------------------------------------------ Lookup existing ressources
data "aws_subnet" "reference_subnet" {
  filter {
    name   = "tag:Name"
    values = ["{{{m.data.aws.referenceSubnet}}}"]
  }
}

data "aws_route53_zone" "forward" {
  name = "{{{m.data.aws.route53.forward_domain}}}"
  private_zone = true
  vpc_id = data.aws_subnet.reference_subnet.vpc_id
}

data "aws_route53_zone" "reverse" {
  name = "{{{m.data.aws.route53.reverse_domain}}}"
  private_zone = true
  vpc_id = data.aws_subnet.reference_subnet.vpc_id
}

{%% if m.data.aws.needMyVpc %%}
data "aws_vpc" "my_vpc" {
  id = data.aws_subnet.reference_subnet.vpc_id
}
{%% endif %%}

{%% for esg in m.data.aws.externalSecurityGroups %%}
data "aws_security_group" "{{{esg}}}" {
  filter {
    name   = "tag:Name"
    values = ["{{{esg}}}"]
  }
}
{%% endfor %%}

// -------------------------------------------- Security groups definition(s)

{%% for name, sg in m.data.aws.securityGroupByName.iteritems() %%}
resource "aws_security_group" "{{{sg.name}}}" {
	name 	= "{{{sg.name}}}"
{%% if sg.description is defined %%}
	description = "{{{ sg.description }}}"
{%% endif %%}
	vpc_id	= data.aws_subnet.reference_subnet.vpc_id
{%% if sg.tags is defined %%}	
  	tags 	= {
{%%- for name, value in sg.tags.iteritems() %%}  		
    	{{{name}}} = "{{{value}}}"
{%% endfor %%}
  	}
{%% endif %%}
{%%  for ingress in sg.ingress %%}
	ingress {
		protocol = "{{{ ingress.protocol }}}"
		from_port = {{{ ingress.from_port }}}
		to_port = {{{ ingress.to_port }}}
{%% if ingress.description is defined %%}
		description = "{{{ ingress.description }}}"
{%% endif %%}
{%% if ingress.self is defined and ingress.self %%}
		self = true
{%% endif %%}
{%% if ingress.cidr_block is defined %%}
		cidr_blocks = ["{{{ ingress.cidr_block }}}"]
{%% endif %%}
{%% if ingress.security_group is defined %%}
		security_groups = [{{{ ingress.security_group }}}]
{%% endif %%}
	} 
{%% endfor %%} 
{%%  for egress in sg.egress %%}
	egress {
		protocol = "{{{ egress.protocol }}}"
		from_port = {{{ egress.from_port }}}
		to_port = {{{ egress.to_port }}}
{%% if egress.description is defined %%}
		description = "{{{ egress.description }}}"
{%% endif %%}
{%% if egress.self is defined and egress.self %%}
		self = true
{%% endif %%}
{%% if egress.cidr_block is defined %%}
		cidr_blocks = ["{{{ egress.cidr_block }}}"]
{%% endif %%}
{%% if egress.security_group is defined %%}
		security_groups = [{{{ egress.security_group }}}]
{%% endif %%}
	} 
{%% endfor %%} 
}

{%% endfor %%} 


// -------------------------------------------- Instance definition(s)

{## WARNING: Loop for data disks must occurs on the same node array here and in the groomer.groomNodes() function ##}
 
locals {
	instances = [
{%% for node in m.cluster.nodes %%}
		{
			name 				= "{{{ node.fqdn }}}"
			subnet_name 		= "{{{ node.aws.subnet }}}"
			instance_type 		= "{{{m.data.roleByName[node.role].aws.instance_type }}}"
			root_size 			= {{{ m.data.roleByName[node.role].root_size }}}
			root_volume_type 	= "{{{m.data.roleByName[node.role].aws.root_volume_type }}}"
			security_group_id 	= {{{m.data.roleByName[node.role].aws.security_group_id }}}
			key_name			= "{{{m.data.aws.keyPair}}}"
			tags				= {
{%%- for name, value in node.aws.tags.iteritems() %%}  		
    								{{{name}}} = "{{{value}}}"
{%% endfor %%}
								}
		},
{%% endfor %%}	
	]
	data_disks = [
{%% for disk in m.data.aws.dataDisks %%}
		{
			instance_index 	= {{{disk.instanceIndex}}}
			size 			= {{{disk.size}}}
			device 			= "{{{disk.device}}}"
		},
{%% endfor %%}	
	]
}
			
// -------------------------------------------- Following is static code

data "aws_subnet" "by_index" {
  count = length(local.instances)
  filter {
    name   = "tag:Name"
    values = [local.instances[count.index].subnet_name]
  }
}

// ------------------------- centos 7 latest
data "aws_ami" "my_ami" {
  most_recent = true
  filter {
    name   = "product-code"
    values = ["aw0evgkw8e5c1q413zgy5pjce"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
  owners = ["679593333241"] # Centos
}


resource "aws_instance" "inst" {
  count                  = length(local.instances)
  ami                    = data.aws_ami.my_ami.id
  instance_type          = local.instances[count.index].instance_type
  subnet_id              = data.aws_subnet.by_index[count.index].id
  key_name               = local.instances[count.index].key_name
  vpc_security_group_ids = [local.instances[count.index].security_group_id]
  tags 					 = local.instances[count.index].tags
  volume_tags 			 = local.instances[count.index].tags
  user_data = <<-EOF
              #!/bin/bash
              hostnamectl set-hostname "${local.instances[count.index].name}"
              EOF
  root_block_device {
    volume_size = local.instances[count.index].root_size
    volume_type = local.instances[count.index].root_volume_type
    delete_on_termination = true
  }
}

resource "aws_route53_record" "forward" {
  count = length(local.instances)
  zone_id = data.aws_route53_zone.forward.id
  name = local.instances[count.index].name
  type = "A"
  ttl = "300"
  records = [aws_instance.inst[count.index].private_ip]
}

resource "aws_route53_record" "reverse" {
  count = length(local.instances)
  zone_id = data.aws_route53_zone.reverse.id
  name = format("%s.%s.%s.%s.in-addr.arpa.",
    split(".", aws_instance.inst[count.index].private_ip)[3],
    split(".", aws_instance.inst[count.index].private_ip)[2],
    split(".", aws_instance.inst[count.index].private_ip)[1],
    split(".", aws_instance.inst[count.index].private_ip)[0]
  )
  type = "PTR"
  ttl = "300"
  records = [local.instances[count.index].name]
}

resource "aws_ebs_volume" "disks" {
  count             = length(local.data_disks)
  availability_zone = data.aws_subnet.by_index[local.data_disks[count.index].instance_index].availability_zone
  size              = local.data_disks[count.index].size
  // Must be same as instance tags. Otherwise, idempotency will fail. (Conflict between aws_ebs_volume.tags and aws_instance.volume_tags
  tags				= local.instances[local.data_disks[count.index].instance_index].tags
}

resource "aws_volume_attachment" "attachments" {
  count       = length(local.data_disks)
  device_name = local.data_disks[count.index].device
  volume_id   = aws_ebs_volume.disks[count.index].id
  instance_id = aws_instance.inst[local.data_disks[count.index].instance_index].id
}

			
